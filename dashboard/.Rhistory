return(data3)
})
output$plotly_vs_stod <- renderPlotly({
plot_ly(stod_vs_data(), x = ~StödUtanför, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
question_vs_data <- reactive({
data  <- patient_df[, c(input$qst, input$cmp)]
colnames(data) <- c("Q1", "Q2")
data_tot <- data %>% group_by(Q2) %>% summarise(Total=n()/nrow(data))
data_qst <- data %>% filter(Q1==input$ans)
data_qst <- data_qst %>% group_by(Q2) %>% summarise(FocusGrp=n()/nrow(data_qst))
output_data <- data_tot %>% left_join(data_qst, by="Q2")
return(output_data)
})
output$plotly_vs_question <- renderPlotly({
plot_ly(question_vs_data(), x = ~Q2, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
}
library(dplyr)
library(plotly)
library(shiny)
library(shinydashboard)
Sys.setlocale(category = "LC_ALL", locale = "sv_SE.UTF-8")
#Read data for diabetesforbondet dashboard
patient_df <- read.csv("patient_df.csv")
#Select questions to display in the Focus Group area
quest_cols <- patient_df %>% select(-Timestamp, -Födelseår, -AntalÅrMedDiabetes, -Landsting.Sjukhus,
-Landsting.Sjukhus_Saknas) %>% colnames()
#Plot for Age Distrubution
age_distr     <- patient_df %>% group_by(Ålder) %>% summarise(antal=n()) %>% filter(Ålder!=99)
plot_age_distrub <- plot_ly(
x = age_distr$Ålder,
y = age_distr$antal,
name = "Age Distr.",
type = "bar"
)
#Plot for Landsting Distrubution
landst_distr  <- patient_df %>% group_by(Landsting) %>% summarise(antal=n())
plot_landst_distrub <- plot_ly(
x = landst_distr$Landsting,
y = landst_distr$antal,
name = "Landst. Distr.",
type = "bar"
)
#Plot for "St?d utanf?r v?rden"
stodutanfor   <- patient_df %>% group_by(StödUtanför) %>% summarise(antal=n())
plot_stod <- plot_ly(stodutanfor, labels = ~StödUtanför, values = ~antal, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~antal,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = TRUE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#Plot for "Kontakt med andra personer med diabetes"
kontakt1d     <- patient_df %>% group_by(KontaktMedDiabetiker) %>% summarise(antal=n())
plot_kontakt <- plot_ly(kontakt1d, labels = ~KontaktMedDiabetiker, values = ~antal, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~antal,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = TRUE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#Plot for F?rtroende
informerad  <- patient_df %>% group_by(HurInformerad) %>% summarise(antal=n())
delaktighet <- patient_df %>% group_by(DelaktighetIBeslut) %>% summarise(antal=n())
foljerrad   <- patient_df %>% group_by(FöljerRåd) %>% summarise(antal=n())
fortroende  <- patient_df %>% group_by(Förtroende) %>% summarise(antal=n())
fortroende_df <- data.frame(informerad, delaktighet[,2],foljerrad[,2],fortroende[,2])
colnames(fortroende_df) <- c("svar", "HurInformerad", "DelaktighetBeslut", "FöljerRåd", "Förtroende")
plot_fortroende <- plot_ly(fortroende_df, x = ~svar, y = ~HurInformerad, type = 'bar', name = 'HurInformerad') %>%
add_trace(y = ~DelaktighetBeslut, name = 'DelaktighetBeslut',  marker = list(color = 'rgb(195, 240, 255)')) %>%
add_trace(y = ~FoljerRad, name = 'FöljerRåd', marker = list(color = 'rgb(167, 88, 162)')) %>%
add_trace(y = ~Fortroende, name = 'Förtroende', marker = list(color = 'rgb(222, 155, 222)')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
#Plot f?r bem?tande
bemotande     <- patient_df %>% group_by(BemötandeVidBesök) %>% summarise(antal=n())
plot_bemotande <- plot_ly(
x = bemotande$BemötandeVidBesök,
y = bemotande$antal,
name = "Bemotande",
type = "bar"
)
#Skapa dataset f?r "Totala distrubutioner"
agegroup_total    <- patient_df %>% group_by(ålderGrupp) %>% summarise(Total=n()/nrow(patient_df))
ladsting_total    <- patient_df %>% group_by(Landsting) %>% summarise(Total=n()/nrow(patient_df))
informerad_total  <- patient_df %>% group_by(HurInformerad) %>% summarise(Total=n()/nrow(patient_df))
fortroende_total  <- patient_df %>% group_by(Förtroende) %>% summarise(Total=n()/nrow(patient_df))
kontakt_total     <- patient_df %>% group_by(KontaktMedDiabetiker) %>% summarise(Total=n()/nrow(patient_df))
stod_total        <- patient_df %>% group_by(StödUtanför) %>% summarise(Total=n()/nrow(patient_df))
View(patient_df)
data  <- patient_df[, c("Kön", "ålderGrupp")]
colnames(data) <- c("Answer", "ålderGrupp")
data <- data %>% filter(Answer=="Kvinna")
data2 <- data %>% group_by(ålderGrupp) %>% summarise(FocusGrp=n()/nrow(data))
data3 <- agegroup_total %>% left_join(data2, by="ålderGrupp")
data3
Sys.setlocale(category = "LC_ALL", locale = "sv_SE.UTF-8")
server <- function(input, output, session) {
outVar = reactive({
mydata <-unique(patient_df[, input$qst])
return(mydata)
})
observe({
updateSelectInput(session, "ans",
label  = "Focus Group: Answer",
choices = outVar()
)})
output$plotly_age <- renderPlotly({
plot_age_distrub
})
output$plotly_landst <- renderPlotly({
plot_landst_distrub
})
output$plotly_stod <- renderPlotly({
plot_stod
})
output$plotly_kontakt <- renderPlotly({
plot_kontakt
})
output$plotly_fortroende <- renderPlotly({
plot_fortroende
})
output$plotly_bemotande <- renderPlotly({
plot_bemotande
})
focus_group_cnt <- reactive({
data  <- patient_df[, c(input$qst, "ålderGrupp")]
colnames(data) <- c("Answer", "ålderGrupp")
data <- data %>% filter(Answer==input$ans)
return(nrow(data))
})
output$FocusGrp_info <- renderValueBox({
valueBox(
focus_group_cnt()
,"antal patienter i fokusgrupp"
,icon = icon("heartbeat")
,color = "purple"
)
})
output$TotalGrp_info <- renderValueBox({
valueBox(
nrow(patient_df)
,"totalt antal patienter"
,icon = icon("heartbeat")
,color = "purple"
)
})
#  age_vs_data <- reactive({
#    data  <- patient_df[, c(input$qst, "ålderGrupp")]
#    colnames(data) <- c("Answer", "ålderGrupp")
#    data <- data %>% filter(Answer==input$ans)
#    data2 <- data %>% group_by(ålderGrupp) %>% summarise(FocusGrp=n()/nrow(data))
#    data3 <- agegroup_total %>% left_join(data2, by="ålderGrupp")
#    return(data3)
#  })
output$plotly_vs_age <- renderPlotly({
plot_ly(age_vs_data(), x = ~ålderGrupp, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
landst_vs_data <- reactive({
data  <- patient_df[, c(input$qst, "Landsting")]
colnames(data) <- c("Answer", "Landsting")
data <- data %>% filter(Answer==input$ans)
data2 <- data %>% group_by(Landsting) %>% summarise(FocusGrp=n()/nrow(data))
data3 <- ladsting_total %>% left_join(data2, by="Landsting")
return(data3)
})
output$plotly_vs_landst <- renderPlotly({
plot_ly(landst_vs_data(), x = ~Landsting, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
informerad_vs_data <- reactive({
data  <- patient_df[, c(input$qst, "HurInformerad")]
colnames(data) <- c("Answer", "HurInformerad")
data <- data %>% filter(Answer==input$ans)
data2 <- data %>% group_by(HurInformerad) %>% summarise(FocusGrp=n()/nrow(data))
data3 <- informerad_total %>% left_join(data2, by="HurInformerad")
return(data3)
})
output$plotly_vs_informerad <- renderPlotly({
plot_ly(informerad_vs_data(), x = ~HurInformerad, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
fortroende_vs_data <- reactive({
data  <- patient_df[, c(input$qst, "Förtroende")]
colnames(data) <- c("Answer", "Förtroende")
data <- data %>% filter(Answer==input$ans)
data2 <- data %>% group_by(Förtroende) %>% summarise(FocusGrp=n()/nrow(data))
data3 <- fortroende_total %>% left_join(data2, by="Förtroende")
return(data3)
})
output$plotly_vs_fortroende <- renderPlotly({
plot_ly(fortroende_vs_data(), x = ~Förtroende, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
kontakt_vs_data <- reactive({
data  <- patient_df[, c(input$qst, "KontaktMedDiabetiker")]
colnames(data) <- c("Answer", "KontaktMedDiabetiker")
data <- data %>% filter(Answer==input$ans)
data2 <- data %>% group_by(KontaktMedDiabetiker) %>% summarise(FocusGrp=n()/nrow(data))
data3 <- kontakt_total %>% left_join(data2, by="KontaktMedDiabetiker")
return(data3)
})
output$plotly_vs_kontakt <- renderPlotly({
plot_ly(kontakt_vs_data(), x = ~KontaktMedDiabetiker, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
stod_vs_data <- reactive({
data  <- patient_df[, c(input$qst, "StödUtanför")]
colnames(data) <- c("Answer", "StödUtanför")
data <- data %>% filter(Answer==input$ans)
data2 <- data %>% group_by(StödUtanför) %>% summarise(FocusGrp=n()/nrow(data))
data3 <- stod_total %>% left_join(data2, by="StödUtanför")
return(data3)
})
output$plotly_vs_stod <- renderPlotly({
plot_ly(stod_vs_data(), x = ~StödUtanför, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
question_vs_data <- reactive({
data  <- patient_df[, c(input$qst, input$cmp)]
colnames(data) <- c("Q1", "Q2")
data_tot <- data %>% group_by(Q2) %>% summarise(Total=n()/nrow(data))
data_qst <- data %>% filter(Q1==input$ans)
data_qst <- data_qst %>% group_by(Q2) %>% summarise(FocusGrp=n()/nrow(data_qst))
output_data <- data_tot %>% left_join(data_qst, by="Q2")
return(output_data)
})
output$plotly_vs_question <- renderPlotly({
plot_ly(question_vs_data(), x = ~Q2, y = ~Total, type = 'bar', name = 'Total') %>%
add_trace(y = ~FocusGrp, name = 'FocusGrp',  marker = list(color = 'rgb(195, 240, 255)')) %>%
layout(yaxis = list(title = 'Andel'), barmode = 'group')
})
}
patient_df <- read.csv("patient_df.csv")
tail(colnames(patient_df))
getObjectStorageFileWithCredentials_2b960019ae7a47dd9601026211e617af <- function(container, filename) {
# This functions returns a textConnection object for a file
# from Bluemix Object Storage.
if(!require(httr)) install.packages('httr')
if(!require(RCurl)) install.packages('RCurl')
library(httr, RCurl)
auth_url <- paste("https://identity.open.softlayer.com",'/v3/auth/tokens', sep= '')
auth_args <- paste('{"auth": {"identity": {"password": {"user": {"domain": {"id": ', "a2710b40b6be4d6daa778694c1070db6",'},"password": ',
"jXusW7A{k4[bW6Bb",',"name": ', "member_6426f285b9adb2ff8fbd8dbbce62f14a7dfa3230",'}},"methods": ["password"]}}}', sep='"')
auth_response <- httr::POST(url = auth_url, body = auth_args)
x_subject_token <-  headers(auth_response)[['x-subject-token']]
auth_body <-  content(auth_response)
access_url <-  unlist(lapply(auth_body[['token']][['catalog']], function(catalog){
if((catalog[['type']] == 'object-store')){
lapply(catalog[['endpoints']], function(endpoints){
if(endpoints[['interface']] == 'public' && endpoints[['region_id']] == 'dallas') {
paste(endpoints[['url']], container, filename, sep='/')}
})
}
}))
data <- content(httr::GET(url = access_url, add_headers ("Content-Type" = "application/json", "X-Auth-Token" = x_subject_token)), as="text")
textConnection(data)
}
patient_df_m   <-  read.csv(file = getObjectStorageFileWithCredentials_2b960019ae7a47dd9601026211e617af("Diabetesfrbundet", "patients_m.csv"))
patient_df_sm  <-  read.csv(file = getObjectStorageFileWithCredentials_2b960019ae7a47dd9601026211e617af("Diabetesfrbundet", "patients_sm.csv"))
patient_kolumnanmn_forbund <- c("Timestamp", "Födelseår", "ArDeFickDiabetes", "Kön", "Landsting/Sjukhus",
"Landsting/Sjukhus_Saknas", "Restid", "StödUtanför", "KontaktMedDiabetiker",
"FlexibelResemöjlighet", "AndraSjukdomar", "HBAC1","LättAttKontakta", "Förtroende",
"FöljerRåd", "NöjdMedBemötande", "BemötandeVidBesök","HurInformerad", "DelaktighetIBeslut",
"ErbjudnaKontaktvägar","AnvändaKontaktvägar", "FöredragnaKontaktvägar", "VillHaCGM",
"ErbjudenCGM", "BetalatFörCGM","VillHaFGM", "ErbjudenFGM","BetalatFörFGM",
"VillHaInsulinpump", "ErbjudenInsulinpump", "BetalatFörInsulinpump",
"CGMLivskvalitet","HjälpAttTolkaCGM", "HjälpMedCGM", "FGMLivskvalitet",
"HjälpAttTolkaFGM", "HjälpMedFGM","InsulinpumpLivskvalitet", "HjälpAttTolkaInsulinpump",
"HjälpMedInsulinpump","ErbjudenStöd", "UtnyttjatStöd", "FrågatOmStöd", "BehovAvStöd",
"HarStödetPåverkatPositivt","NöjdMedStödet")
patient_kolumnanmn_socialamedier <- c("Timestamp","Födelseår", "ArDeFickDiabetes", "Kön", "Medlem", "Landsting/Sjukhus", "Landsting/Sjukhus_Saknas",
"Restid", "StödUtanför", "KontaktMedDiabetiker", "FlexibelResemöjlighet","AndraSjukdomar",
"HBAC1", "LättAttKontakta", "Förtroende", "FöljerRåd","NöjdMedBemötande", "BemötandeVidBesök",
"HurInformerad", "DelaktighetIBeslut", "ErbjudnaKontaktvägar","AnvändaKontaktvägar", "FöredragnaKontaktvägar",
"VillHaCGM","ErbjudenCGM", "BetalatFörCGM","VillHaFGM", "ErbjudenFGM","BetalatFörFGM","VillHaInsulinpump",
"ErbjudenInsulinpump", "BetalatFörInsulinpump","CGMLivskvalitet","HjälpAttTolkaCGM", "HjälpMedCGM",
"FGMLivskvalitet","HjälpAttTolkaFGM", "HjälpMedFGM","InsulinpumpLivskvalitet", "HjälpAttTolkaInsulinpump",
"HjälpMedInsulinpump","ErbjudenStöd", "UtnyttjatStöd", "FrågatOmStöd", "BehovAvStöd",
"HarStödetPåverkatPositivt","NöjdMedStödet")
colnames(patient_df_m)  <- patient_kolumnanmn_forbund
colnames(patient_df_sm) <- patient_kolumnanmn_socialamedier
patient_df_m$Medlem <- "Ja"
patient_df_m$SurveyChannel <- "Mail"
patient_df_sm$SurveyChannel <- "Sociala Medier"
patient_df <- plyr::rbind.fill(patient_df_m, patient_df_sm)
patient_df$Landsting <- sapply(as.character(patient_df$"Landsting/Sjukhus"),
function(x) strsplit(x, split = "\\-")[[1]][1])
patient_df$Sjukhus <- sapply(as.character(patient_df$"Landsting/Sjukhus"),
function(x) strsplit(x, split = "\\-")[[1]][2])
patient_df$Age <- 2017-as.integer(as.character(patient_df$Födelseår))
patient_df$AntalÅrMedDiabetes <- 2017-as.integer(as.character(patient_df$ÅrMedDiabetes))
patient_df$AntalÅrMedDiabetes <- 2017-as.integer(as.character(patient_df$ArDeFickDiabetes))
patient_df$AgeDåDeFickDiabetes <- patient_df$Age-patient_df$AntalÅrMedDiabetes
patient_df[is.na(patient_df$Age), "Age"] <- "99"
patient_df$Age <- as.integer(patient_df$Age)
levels <- c(-Inf, 9,19,29,39,49,59,Inf)
labels <- c("0-9", "10-19", "20-29", "30-39", "40-49", "50-59", "60+")
patient_df$ageGroup <- cut(patient_df$Age, breaks=levels, labels=labels)
write.csv(patient_df, "patient_df.csv", row.names = FALSE)
View(patient_df)
patient_df <- read.csv("patient_df.csv")
View(patient_df)
ålderGrupp
library(dplyr)
library(plotly)
library(shiny)
library(shinydashboard)
Sys.setlocale(category = "LC_ALL", locale = "sv_SE.UTF-8")
#Read data for diabetesforbondet dashboard
patient_df <- read.csv("patient_df.csv")
#Select questions to display in the Focus Group area
quest_cols <- patient_df %>% select(-Timestamp, -Födelseår, -ArDeFickDiabetes, -Landsting.Sjukhus,
-Landsting.Sjukhus_Saknas) %>% colnames()
#Plot for Age Distrubution
age_distr     <- patient_df %>% group_by(Ålder) %>% summarise(antal=n()) %>% filter(Age!=99)
plot_age_distrub <- plot_ly(
x = age_distr$Age,
y = age_distr$antal,
name = "Age Distr.",
type = "bar"
)
#Plot for Landsting Distrubution
landst_distr  <- patient_df %>% group_by(Landsting) %>% summarise(antal=n())
plot_landst_distrub <- plot_ly(
x = landst_distr$Landsting,
y = landst_distr$antal,
name = "Landst. Distr.",
type = "bar"
)
#Plot for "St?d utanf?r v?rden"
stodutanfor   <- patient_df %>% group_by(StödUtanför) %>% summarise(antal=n())
plot_stod <- plot_ly(stodutanfor, labels = ~StödUtanför, values = ~antal, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~antal,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = TRUE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#Plot for "Kontakt med andra personer med diabetes"
kontakt1d     <- patient_df %>% group_by(KontaktMedDiabetiker) %>% summarise(antal=n())
plot_kontakt <- plot_ly(kontakt1d, labels = ~KontaktMedDiabetiker, values = ~antal, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~antal,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = TRUE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#Plot for F?rtroende
informerad  <- patient_df %>% group_by(HurInformerad) %>% summarise(antal=n())
delaktighet <- patient_df %>% group_by(DelaktighetIBeslut) %>% summarise(antal=n())
foljerrad   <- patient_df %>% group_by(FöljerRåd) %>% summarise(antal=n())
fortroende  <- patient_df %>% group_by(Förtroende) %>% summarise(antal=n())
fortroende_df <- data.frame(informerad, delaktighet[,2],foljerrad[,2],fortroende[,2])
colnames(fortroende_df) <- c("svar", "HurInformerad", "DelaktighetBeslut", "FöljerRåd", "Förtroende")
plot_fortroende <- plot_ly(fortroende_df, x = ~svar, y = ~HurInformerad, type = 'bar', name = 'HurInformerad') %>%
add_trace(y = ~DelaktighetBeslut, name = 'DelaktighetBeslut',  marker = list(color = 'rgb(195, 240, 255)')) %>%
add_trace(y = ~FöljerRåd, name = 'FöljerRåd', marker = list(color = 'rgb(167, 88, 162)')) %>%
add_trace(y = ~Förtroende, name = 'Förtroende', marker = list(color = 'rgb(222, 155, 222)')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
#Plot f?r bem?tande
bemotande     <- patient_df %>% group_by(BemötandeVidBesök) %>% summarise(antal=n())
plot_bemotande <- plot_ly(
x = bemotande$BemötandeVidBesök,
y = bemotande$antal,
name = "Bemotande",
type = "bar"
)
#Skapa dataset f?r "Totala distrubutioner"
agegroup_total    <- patient_df %>% group_by(ageGroup) %>% summarise(Total=n()/nrow(patient_df))
ladsting_total    <- patient_df %>% group_by(Landsting) %>% summarise(Total=n()/nrow(patient_df))
informerad_total  <- patient_df %>% group_by(HurInformerad) %>% summarise(Total=n()/nrow(patient_df))
fortroende_total  <- patient_df %>% group_by(Förtroende) %>% summarise(Total=n()/nrow(patient_df))
kontakt_total     <- patient_df %>% group_by(KontaktMedDiabetiker) %>% summarise(Total=n()/nrow(patient_df))
stod_total        <- patient_df %>% group_by(StödUtanför) %>% summarise(Total=n()/nrow(patient_df))
library(dplyr)
library(plotly)
library(shiny)
library(shinydashboard)
Sys.setlocale(category = "LC_ALL", locale = "sv_SE.UTF-8")
#Read data for diabetesforbondet dashboard
patient_df <- read.csv("patient_df.csv")
#Select questions to display in the Focus Group area
quest_cols <- patient_df %>% select(-Timestamp, -Födelseår, -ArDeFickDiabetes, -Landsting.Sjukhus,
-Landsting.Sjukhus_Saknas) %>% colnames()
#Plot for Age Distrubution
age_distr     <- patient_df %>% group_by(Age) %>% summarise(antal=n()) %>% filter(Age!=99)
plot_age_distrub <- plot_ly(
x = age_distr$Age,
y = age_distr$antal,
name = "Age Distr.",
type = "bar"
)
#Plot for Landsting Distrubution
landst_distr  <- patient_df %>% group_by(Landsting) %>% summarise(antal=n())
plot_landst_distrub <- plot_ly(
x = landst_distr$Landsting,
y = landst_distr$antal,
name = "Landst. Distr.",
type = "bar"
)
#Plot for "St?d utanf?r v?rden"
stodutanfor   <- patient_df %>% group_by(StödUtanför) %>% summarise(antal=n())
plot_stod <- plot_ly(stodutanfor, labels = ~StödUtanför, values = ~antal, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~antal,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = TRUE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#Plot for "Kontakt med andra personer med diabetes"
kontakt1d     <- patient_df %>% group_by(KontaktMedDiabetiker) %>% summarise(antal=n())
plot_kontakt <- plot_ly(kontakt1d, labels = ~KontaktMedDiabetiker, values = ~antal, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~antal,
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = TRUE) %>%
layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
#Plot for F?rtroende
informerad  <- patient_df %>% group_by(HurInformerad) %>% summarise(antal=n())
delaktighet <- patient_df %>% group_by(DelaktighetIBeslut) %>% summarise(antal=n())
foljerrad   <- patient_df %>% group_by(FöljerRåd) %>% summarise(antal=n())
fortroende  <- patient_df %>% group_by(Förtroende) %>% summarise(antal=n())
fortroende_df <- data.frame(informerad, delaktighet[,2],foljerrad[,2],fortroende[,2])
colnames(fortroende_df) <- c("svar", "HurInformerad", "DelaktighetBeslut", "FöljerRåd", "Förtroende")
plot_fortroende <- plot_ly(fortroende_df, x = ~svar, y = ~HurInformerad, type = 'bar', name = 'HurInformerad') %>%
add_trace(y = ~DelaktighetBeslut, name = 'DelaktighetBeslut',  marker = list(color = 'rgb(195, 240, 255)')) %>%
add_trace(y = ~FöljerRåd, name = 'FöljerRåd', marker = list(color = 'rgb(167, 88, 162)')) %>%
add_trace(y = ~Förtroende, name = 'Förtroende', marker = list(color = 'rgb(222, 155, 222)')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
#Plot f?r bem?tande
bemotande     <- patient_df %>% group_by(BemötandeVidBesök) %>% summarise(antal=n())
plot_bemotande <- plot_ly(
x = bemotande$BemötandeVidBesök,
y = bemotande$antal,
name = "Bemotande",
type = "bar"
)
#Skapa dataset f?r "Totala distrubutioner"
agegroup_total    <- patient_df %>% group_by(ageGroup) %>% summarise(Total=n()/nrow(patient_df))
ladsting_total    <- patient_df %>% group_by(Landsting) %>% summarise(Total=n()/nrow(patient_df))
informerad_total  <- patient_df %>% group_by(HurInformerad) %>% summarise(Total=n()/nrow(patient_df))
fortroende_total  <- patient_df %>% group_by(Förtroende) %>% summarise(Total=n()/nrow(patient_df))
kontakt_total     <- patient_df %>% group_by(KontaktMedDiabetiker) %>% summarise(Total=n()/nrow(patient_df))
stod_total        <- patient_df %>% group_by(StödUtanför) %>% summarise(Total=n()/nrow(patient_df))
View(patient_df)
patient_df <- read.csv("patient_df.csv")
colmames(patient_df)
colnames(patient_df)
patient_df <- read.csv("patient_df.csv")
View(patient_df)
Sys.setlocale(category = "LC_ALL", locale = "sv_SE.UTF-8")
patient_df <- read.csv("patient_df.csv")
quest_cols <- patient_df %>% select(-Timestamp, -Födelseår, -Landsting.Sjukhus,
-Landsting.Sjukhus_Saknas, -ArDeFickDiabetes) %>% colnames()
age_distr     <- patient_df %>% group_by(Age) %>% summarise(antal=n()) %>% filter(Age!=99)
plot_age_distrub <- plot_ly(
x = age_distr$Age,
y = age_distr$antal,
name = "Age Distr.",
type = "bar"
)
View(patient_df)
View(age_distr)
getwd()
getwd("/Users/mammarrahmani/Projects/diabetesforbund/dashboard")
setwd("/Users/mammarrahmani/Projects/diabetesforbund/dashboard")
runApp()
runApp()
str(patient_df)
